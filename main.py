# -*- coding: utf-8 -*-
"""mnist_self_implement.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ge-Kv__rNc5lF1ak8M0EytyMv6KbaEyH
"""
import numpy as np
from util.util import accuracy
from data.dataset import get_mnist
from util.activation import cross_entropy
from network import NN


def main():
    epochs = 20
    log_step = 1000
    x_train, x_val, y_train, y_val = get_mnist()
    mnist_nn = NN(input_size = 784, hidden_1_size = 512, hidden_2_size = 256, output_size = 10)

    for epoch in range(epochs):
        loss_ = []
        for step, (image, label) in enumerate(zip(x_train, y_train)):
            image = np.expand_dims(image, axis=1)  
            label = np.expand_dims(label, axis=1)  
            output = mnist_nn.forward(image)
            loss = cross_entropy(output, label)
            mnist_nn.backward(label)
            mnist_nn.update()
            loss_.append(loss)
            
            if step % log_step == 0:
                print('[epoch {}/{}] step: {}/{}, loss: {}'.format(epoch, epochs, step, len(x_train), sum(loss_)/len(loss_)))

        test_acc = accuracy(mnist_nn, x_val, y_val)
        train_acc = accuracy(mnist_nn, x_train, y_train)
        epoch_loss = sum(loss_)/len(loss_)
        print('train acc: {}, test acc: {}, loss: {}'.format(train_acc, test_acc, epoch_loss))
    
if __name__ == '__main__':
    main()